# Generated from /home/fabricio/DHS/dhs2024/src/main/java/dhs2024/python/dhs2024/compiladores.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,122,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,4,
        16,84,8,16,11,16,12,16,85,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,3,21,107,
        8,21,1,21,1,21,1,21,5,21,112,8,21,10,21,12,21,115,9,21,1,22,1,22,
        1,22,1,22,1,23,1,23,0,0,24,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,
        7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,
        41,19,43,20,45,21,47,22,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,10,
        13,13,32,32,124,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,0,3,51,1,0,0,0,
        5,53,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,59,1,0,0,0,13,61,1,0,0,
        0,15,63,1,0,0,0,17,65,1,0,0,0,19,67,1,0,0,0,21,69,1,0,0,0,23,71,
        1,0,0,0,25,73,1,0,0,0,27,75,1,0,0,0,29,77,1,0,0,0,31,79,1,0,0,0,
        33,83,1,0,0,0,35,87,1,0,0,0,37,91,1,0,0,0,39,97,1,0,0,0,41,101,1,
        0,0,0,43,106,1,0,0,0,45,116,1,0,0,0,47,120,1,0,0,0,49,50,7,0,0,0,
        50,2,1,0,0,0,51,52,7,1,0,0,52,4,1,0,0,0,53,54,5,40,0,0,54,6,1,0,
        0,0,55,56,5,41,0,0,56,8,1,0,0,0,57,58,5,123,0,0,58,10,1,0,0,0,59,
        60,5,125,0,0,60,12,1,0,0,0,61,62,5,59,0,0,62,14,1,0,0,0,63,64,5,
        43,0,0,64,16,1,0,0,0,65,66,5,45,0,0,66,18,1,0,0,0,67,68,5,42,0,0,
        68,20,1,0,0,0,69,70,5,47,0,0,70,22,1,0,0,0,71,72,5,37,0,0,72,24,
        1,0,0,0,73,74,5,62,0,0,74,26,1,0,0,0,75,76,5,60,0,0,76,28,1,0,0,
        0,77,78,5,61,0,0,78,30,1,0,0,0,79,80,5,61,0,0,80,81,5,61,0,0,81,
        32,1,0,0,0,82,84,3,3,1,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,
        0,85,86,1,0,0,0,86,34,1,0,0,0,87,88,5,105,0,0,88,89,5,110,0,0,89,
        90,5,116,0,0,90,36,1,0,0,0,91,92,5,119,0,0,92,93,5,104,0,0,93,94,
        5,105,0,0,94,95,5,108,0,0,95,96,5,101,0,0,96,38,1,0,0,0,97,98,5,
        102,0,0,98,99,5,111,0,0,99,100,5,114,0,0,100,40,1,0,0,0,101,102,
        5,105,0,0,102,103,5,102,0,0,103,42,1,0,0,0,104,107,3,1,0,0,105,107,
        5,95,0,0,106,104,1,0,0,0,106,105,1,0,0,0,107,113,1,0,0,0,108,112,
        3,1,0,0,109,112,3,3,1,0,110,112,5,95,0,0,111,108,1,0,0,0,111,109,
        1,0,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,
        1,0,0,0,114,44,1,0,0,0,115,113,1,0,0,0,116,117,7,2,0,0,117,118,1,
        0,0,0,118,119,6,22,0,0,119,46,1,0,0,0,120,121,9,0,0,0,121,48,1,0,
        0,0,5,0,85,106,111,113,1,6,0,0
    ]

class compiladoresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    SUMA = 6
    RESTA = 7
    MULT = 8
    DIV = 9
    MOD = 10
    MAY = 11
    MEN = 12
    ASIG = 13
    IGUAL = 14
    NUMERO = 15
    INT = 16
    WHILE = 17
    FOR = 18
    IF = 19
    ID = 20
    WS = 21
    OTRO = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'>'", "'<'", "'='", "'=='", "'int'", "'while'", "'for'", 
            "'if'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "SUMA", "RESTA", "MULT", "DIV", 
            "MOD", "MAY", "MEN", "ASIG", "IGUAL", "NUMERO", "INT", "WHILE", 
            "FOR", "IF", "ID", "WS", "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "SUMA", 
                  "RESTA", "MULT", "DIV", "MOD", "MAY", "MEN", "ASIG", "IGUAL", 
                  "NUMERO", "INT", "WHILE", "FOR", "IF", "ID", "WS", "OTRO" ]

    grammarFileName = "compiladores.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


